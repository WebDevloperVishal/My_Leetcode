generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id       String   @id @default(cuid())
  name     String?
  email    String   @unique
  image    String?
  role     UserRole @default(USER)
  password String

  Problems Problem[]
  submissions Submission[]
  solvedProblems ProblemSolved[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Problem {
  id          String     @id @default(cuid())
  title       String
  description String
  difficulty  Difficulty

  tags        String[]
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testCases          Json
  codeSnippets       Json
  referenceSolutions Json

userId String
  user User @relation(fields: [userId], references: [id] , onDelete: Cascade)

submissions Submission[]
solvedBy ProblemSolved[]

}

model Submission{
  id String @id @default(cuid())
  userId String
  problem String
  sourceCode Json
  stdin String?
  stdout String?
  stderr String?
  compileOutput String?
  memory String?
  time String?
  createdAt DateTime @default(now())

  //relation
  user  User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  problem Problem @relation(fields: [problemId] , references: [id] , onDelete: Cascade)
  testCases  TestCaseResult[]

  @@index([status])
}

model testCaseResult {
  id String @id @default(cuid())
  submissionId String
  testCases Int
  passed Boolean
  stdout String?
  expected String?
  stderr String?
  compileOutput String?
  compileOutput String?
  status String?
  memory String?
  time String?

  createdAt DateTime @default(now())

  submissions Submission @relation(fields: [submissionId] , references: [id] , onDelete: Cascade)
  
}

model ProblemSolved {
  id String @id @default(cuid())
  userId String
  problemId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  problem Problem @relation(fields: [problemId] , references: [id] , onDelete: Cascade)


  @@unique([userId , problemId])

}